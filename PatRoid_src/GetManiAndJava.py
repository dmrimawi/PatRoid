#!/usr/bin/env python

##################
# Python Imports #
##################

import os

#################
# Local Imports #
#################

from Common import CommonMethods

#############
# CONSTANTS #
#############

MANIFEST_FILE_NAME = "AndroidManifest.xml"
AUTOMATICALLY_GENERATED_FILE_CONTENT = "Automatically generated file. DO NOT MODIFY"


class GetManiAndJava(object):
    """
        The first class to call in this project
        This class aims to collect all the java files
        and the manifest xml file
    """
    def __init__(self, android_project_path):
        """
        Constructor of class
        """
        self.project_path = android_project_path

    def get_project_manifest(self, root_path=None):
        """
        This method search for the manifest.xml file inside the project directory
        :return: full path of the manifest file
        """
        if root_path is None:
            root_path = self.project_path
        files_under_root_path = os.listdir(root_path)
        directories = list()
        full_manifest_file = None
        for file_name in files_under_root_path:
            full_file_path = os.path.join(root_path, file_name)
            if MANIFEST_FILE_NAME == file_name:
                full_manifest_file = full_file_path
                break
            if os.path.isdir(full_file_path):
                directories.append(full_file_path)
        for directory in directories:
            if full_manifest_file is None:
                full_manifest_file = self.get_project_manifest(root_path=directory)
            else:
                break
        return full_manifest_file

    def __is_auto_generated(self, file_path):
        """
        This is a private method to check if the given file is autogenerated or not
        autogenerate files are the one contains the pattern: AUTOMATICALLY_GENERATED_FILE_CONTENT
        :param file_path: the file to check
        :return: true if it autogenerated and false otherwise
        """
        file_content = CommonMethods.read_file(file_path)
        return AUTOMATICALLY_GENERATED_FILE_CONTENT in file_content

    def get_all_java_files(self, root_path=None):
        """
        This method search for all java files in android project
        :return: list of full paths for all java files
        """
        list_of_java_files = list()
        if root_path is None:
            root_path = self.project_path
        files_under_root_path = os.listdir(root_path)
        for file_name in files_under_root_path:
            full_file_path = os.path.join(root_path, file_name)
            if os.path.isdir(full_file_path):
                list_of_java_files.extend(self.get_all_java_files(root_path=full_file_path))
            if "R.java" != file_name and file_name.endswith(".java"):
                if not self.__is_auto_generated(full_file_path):
                    list_of_java_files.append(full_file_path)
        return list_of_java_files